let Matching,User,mongoose,io;_1b6‍.x([["matching",()=>matching],["join",()=>join],["send",()=>send],["block",()=>block],["cancel",()=>cancel]]);_1b6‍.w("../../models/matching",[["default",["Matching"],function(v){Matching=v}]]);_1b6‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);_1b6‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_1b6‍.w("socket.io-client",[["default",["io"],function(v){io=v}]]);


//클라이언트에서 연결할 소켓

// 매칭이 되었을 때 방이 생성됨
       const matching = async ctx=>{
    connetToServer();
}

// 입장
       const join = async ctx=>{
    connetToServer();
}

// 메세지 보내기
       const send = async ctx=>{
    connetToServer();
}

// 사용자 차단
       const block = async ctx=>{
    connetToServer();
}

// 매치 취소하기
       const cancel = async ctx=>{
    connetToServer();
}

//포트번호
const { PORT } = process.env;
//서버접속
function connetToServer(){
    console.log('connetToServer 호출');

    let url = 'http://localhost:' + PORT;
    const socket = io.connect(url);
    console.log('socket 객체 생성');
    socket.on('connect', function() {
        _1b6‍.g.console.log('웹소켓 서버에 연결되었습니다. : ' + url);

        socket.on('message', function(message) {
        });
        socket.on('response', function(response) {
        });
        socket.on('room', function(data){
        });
    });

    socket.on('disconnect', function() {
        console.log('웹소켓 연결이 종료되었습니다.');
        println('웹소켓 연결이 종료되었습니다.');
    });
}